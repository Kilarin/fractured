--Beanstalk Values

--this file holds the values that are used to define how the beanstalks for each world level (or world layer)
--are rolled.  It will ONLY be used the first time a world is generated.
--this file should NOT be confused with the beanstalks file that holds the actual specific values for each
--beanstalk.  Essentially, this file is used (once) to generate the beanstalk file.  After that beanstalks
--are loaded from the beanstalk file and this is not needed again unless you delete the beanstalk file

--two dashes indicate a comment, just like in lua.  can be anywhere in line, everything after -- is ignored
  
--this is a description of what each possible value is used for:

--beanstalk_level : indicates which beanstalk level (world layer) you are defining.  Please start at 1 and 
--     increase by 1.  Program behavior if you skip levels or define them out of order may be unpredictable

--count      : is how many beanstalks there will be on this level of the world.  if you dont make it a perfect
--     square, the program will reduce it to a perfect square. The beanstalks will divid the world into a grid
--     and distribute the beanstalks randomly, one to each grid.

--bot        : defines the bottom y cord for the beanstalks, where they start for this world layer

--height     : how tall each beanstalk should be.  So the top y node is bot+height-1

--snode      : the node that will be used for the stem of the beanstalk on this world layer

--vnode      : the node that will be used for vines on the beanstalk on this world layer

--stemtot    : how many stems a particular beanstalk will have
          
--stemradius : the radius of the stems

--rot1radius : the radius the beanstalk stems rotate around.  

--enforce_min_rot1rad : if this is Y then no mater what values get randomly rolled for rot1radius, the final 
--     value will be a minimum of stemradius+1.  I added this because I think the beanstalks look better
--     with some seperation between them.  when rot1radius is less than stemradius+1 the stems overlap.
--     but you may disagree, if so, set this to N.  (NOTE: even with enforce_min_rot1rad=Y rot1crazy
--     can drop the rot1radius below stemradius+1 and cause merging, I'm ok with that)

--rot1dir    : This is the direction the stems rotate around each other.  +1=clockwise, -1=counter clockwise

--rot1yper360: This determines how many Y units for one full 360 degree rotation around rot1radius center.
--     So a rot1yper360 of 20 means that the stems will make one full rotation around the rot1 center 
--     between y=1 and y=20.  Note that the smaller the yper360 number, the faster the rotation.  If the
--     rotation is TOO fast, (less than rot1circumf) beanstalk layers may not touch, which looks goofy in
--     my opinion, I'm considering coding a fix for that.  But it happens pretty rarely.
     
--rot1crazy  : This number says how much random variance there will be in rot1radius.  The change goes in
--     both directions, so a rot1crazy of 3 means the rot1radius can vary from rot1radius-3 through 
--     rot1radius+3.  The random variation is based on perlin noise, so it changes gradually and looks
--     natural.  Large values for rot1crazy (and rot2crazy) can end up in some very odd (and interesting)
--     looking beanstalks.

--rot2radius : This is the radius of the secondary rotation circle.  The center around which the beanstalk
--     stems rotate (rot1), itself rotates around the center of rot2 at a distance of rot2radius.  This
--     combination of two rotations helps the beanstalk's groth to look more natural and interesting

--rot2dir    : The direction of the secondary rotation.  +1=clockwise, -1=counter clockwise.  When rot1dir
--     and rot2dir are in opposite directions it makes for some VERY unusual looking beanstalks.

--rot2yper360: Just like rot1yper360, but this determines the number of y units per one full 360 degree
--     rotation of the secondary circle (rot2)

--rot2crazy  : Just like rot1crazy, but this applies to the variation in the secondary rotation

--now, one more thing before you get to the actual data.  I have to explain the format of this file.
--The basic format is 
--tag = value
--but value can be simple, as in 
--stemtot=3   
--that will just give you a fixed value, every beanstalk will have 3 stems.
--OR, you can specify a range (using semicolon as the seperator) like this:
--stemtot=2;4
--this will result in a random value between 2 and 4 for each beanstalk.
--but suppose you want something more complicated.  Well then you can specify several possible values
--stemtot=5|3
--       =3|2;5
--       =1|1;8
--note that you leave the tag empty on the extra rows so that the program knows you are adding new
--options to the same tag.
--the number before the vertical bar is the CHANCE of that row being chosen.  It is not necesarily
--a percentage.  The program generates a random number from 1 to the total of all chances, then 
--determines which row was chosen.  So, in the above example, the total of all chances is 5+3+1=9
--if the random number is between 1 and 5, then the stemtot will be 3
--if the random number is between 6 and 8, then the stemtot will be a random number between 2 and 5
--if the random number is 9, then the stemtot will be a random number between 1 and 8.  

--and you can use variables when assigning values.  For example:
--rot2dir=rot1dir*-1
--which will make rot2dir the opposite direction of rot1dir
--you can use all of the math.functions and make these as complicated as you wish, like:
--rot2radius=math.floor(rot1radius/4))-math.pi ; math.sin(stemtot)+rot1radius^3  
--note the semicolon, the above is a range with from and to values

--variables available to be used stemtot,stemradius,rot1dir,rot1radius,rot1circumf,rot1yper360,rot1crazy,
--    rot2dir,rot2radius,rot2circumf,rot2yper360,rot2crazy
--but WARNING, these values are set in the order listed, and if you try to reference one of them before it is 
--set you will cause an error.  For example, its ok to use rot1dir in the calculation of rot2dir, but if you 
--try to use rot2dir when calculating rot1dir, it will cause an error because rot2dir has not been calculated yet.

--final point.  If you do NOT set a value for a beanstalk level, the program will use the value for the previous
--level.  You will note that in the below example, we only set stemtot,stemradius,rot1radius.. and all of those
--values in level 1.  All of the rest of the levels will use the same values.

--ok, now, here is a real example beanstalk values file
----------------------------------------------------------------

beanstalk_level=1
count      =16
bot        =-10
height     =6020
snode      =beanstalk:beanstalk1
vnode      =beanstalk:vine1
stemtot    =75|3
           =20|2;5   
           =05|1;8
stemradius =75|2;6
           =20|3;9
           =05|4;10
rot1radius =3|5;8
           =1|3;10
enforce_min_rot1rad=Y   --Y means rot1rad minimum will be stemradius+1
rot1dir    =1|1
           =1|-1
rot1yper360=3|rot1circumf;80        --you can use variables in these values  
           =1|rot1circumf;100     
rot1crazy  =1|0
           =1|3;8              --very small values for crazy are hard to detect, so I use a minimum of 3
rot2radius =3|3;rot1radius+5   --yes you can use rot1radius as a value here
           =1|0;16
rot2dir    =1|rot1dir       
           =1|rot1dir*-1
rot2yper360=3|rot2circumf;100  
           =1|rot2circumf;500 
rot2crazy  =1|0
           =1|5;17        

beanstalk_level=2
count      =16
bot        =5990
height     =5020
snode      =beanstalk:beanstalk2
vnode      =beanstalk:vine2
--if you dont specify stemtot, stemradius, etc, it will use the same values as for the previous beanstalk level

beanstalk_level=3
count      =16
bot        =10990
height     =5020
snode      =beanstalk:beanstalk3
vnode      =beanstalk:vine3

beanstalk_level=4
count      =9
bot        =15990
height     =5020
snode      =beanstalk:beanstalk4
vnode      =beanstalk:vine4

beanstalk_level=5
count      =9
bot        =20990
height     =5020
snode      =beanstalk:beanstalk5
vnode      =beanstalk:vine5

